# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
     - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  KONG_PROXY_URL: ${{ vars.KONG_PROXY_URL }}
  KONG_TOKEN: ${{ secrets.KONG_TOKEN }}
  API_KEY: ${{ secrets.API_KEY }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-customer-api:
    name: Deploy Customer API to Gateway
    runs-on: [macos-latest]
    defaults:
      run:
        working-directory: ./kong
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      #Installing the deck and schemathesis cli
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
            node-version: '20'
      - name: Install Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12' 
      - name: Install Deck  
        run: |
          brew tap kong/deck
          brew install deck
      - name: Install schemathesis
        run: python -m pip install schemathesis

      # Convert OpenApi into Kong file
      - name: Generate declarative config
        run: |
          deck file openapi2kong -s openapi.yaml -o kong.yaml

      # Replace the service name in plugins
      - name: Replace the service name in plugins
        run: |
          SERVICE_NAME=$(yq e '.services[].name' kong.yaml)
          for yamlfile in plugins/*.yaml; do
            deck file patch -s "$yamlfile" -o "$yamlfile" --selector '$..plugins[*]' --value 'service: "'$SERVICE_NAME'"'
          done

      # Combines all configuration files into one Kong file
      - name: Generate declarative config
        run: |
          deck file render kong.yaml ./plugins -o kong.yaml
          cat kong.yaml

      #Backup old config for US
      - name: Backup Spec
        run: |
          SERVICE_NAME=$(yq e '.services[].name' kong.yaml)
          deck gateway dump -o backupSpec.yaml \
            --konnect-addr https://eu.api.konghq.com --konnect-token $KONG_TOKEN --konnect-control-plane-name Aviva --select-tag $SERVICE_NAME

      # Ping the Kong instance
      # Sync to Kong
      - name: Update Kong Config
        run: |
          SERVICE_NAME=$(yq e '.services[].name' kong.yaml)
          deck gateway ping --konnect-addr https://eu.api.konghq.com --konnect-token $KONG_TOKEN --konnect-control-plane-name Aviva
          deck gateway sync kong.yaml \
            --konnect-addr https://eu.api.konghq.com --konnect-token $KONG_TOKEN --konnect-control-plane-name Aviva --select-tag $SERVICE_NAME

      # Replace the server url in openapi spec and wait for Kong config to sync up
      - name: Replace the server url
        run: |
          sleep 15
          deck file patch -s openapi.yaml -o openapi2test.yaml --selector '$..servers[*]' --value 'url:"'$KONG_PROXY_URL'"'

      # Run tests on Kong endpoint
      - name: Run test suites for Kong Proxy
        run: |
          st run --checks all --validate-schema True -D all --experimental openapi-3.1 \
            -H api_key:$API_KEY -b $KONG_PROXY_URL --request-tls-verify false \
            --hypothesis-phases=explicit -v openapi.yaml    

      # Backup Spec on Failure
      - name: Backup Spec on Failure
        if: ${{ failure() }}
        run: |
          SERVICE_NAME=$(yq e '.services[].name' kong.yaml)
          deck gateway sync backupSpec.yaml \
            --konnect-addr https://eu.api.konghq.com --konnect-token $KONG_TOKEN --konnect-control-plane-name Aviva --select-tag $SERVICE_NAME

