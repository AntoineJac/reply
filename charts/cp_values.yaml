image:
  repository: kong/kong-gateway
  tag: "3.4.3.10"
  pullPolicy: Always

customEnv:
  AWS_REGION: 'neverRead'
  AWS_ACCESS_KEY_ID: myaccesskey
  AWS_SECRET_ACCESS_KEY: mysecretkey
  AWS_CONFIG_STORAGE_ENDPOINT: http://miniobackup.mt:9000

env:
  database: "postgres"
  pg_host: kongpg-postgresql.pg.svc.cluster.local
  pg_user: kong
  pg_database: kong
  pg_password:
    valueFrom:
      secretKeyRef:
        name: kong-enterprise-postgres-password
        key: password
  #admin_api_uri: https://api.manager.company.io
  #admin_gui_url: https://manager.company.io
  portal_api_url: http://localhost:8004 #https://api.company.io
  portal_gui_protocol: http
  portal_gui_host: localhost:8003 #portal.company.io
  portal_cors_origins: "*"
  #portal_app_auth: external-oauth2

  plugins: bundled #rate-limiting-advanced-by-size
  CLUSTER_FALLBACK_CONFIG_EXPORT: "on"
  CLUSTER_FALLBACK_CONFIG_STORAGE: s3://test-antoine/test-prefix

  portal_auto_approve: off
  event_hooks_enabled: on
  nginx_worker_processes: "2"

  lua_ssl_trusted_certificate: system, /etc/secrets/kong-cp-cert/ca.crt
  lua_ssl_verify_depth: 2
  log_level: debug
  # opentelemetry_tracing: all
  # opentelemetry_tracing_sampling_rate: 1
  # tracing_instrumentations: all
  # tracing_sampling_rate: 1
  vitals: on
  role: control_plane

 # Cluster certs settings for CP-DP
  cluster_mtls: "pki"
  cluster_cert: /etc/secrets/kong-cp-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-cp-cert/tls.key
  cluster_ca_cert: /etc/secrets/kong-cp-cert/ca.crt
  ssl_cert: /etc/secrets/kong-cp-cert/tls.crt
  ssl_cert_key: /etc/secrets/kong-cp-cert/tls.key
  cluster_allowed_common_names: wss.company.io, api.company.io

  anonymous_reports: "off"
  untrusted_lua: "on"
  password:
    valueFrom:
      secretKeyRef:
        name: kong-enterprise-superuser-password
        key: password

  #portal_auth: basic-auth
  portal_auth: openid-connect
  portal_auth_conf:
    valueFrom:
      secretKeyRef:
        name: kong-auth-conf
        key: portal_auth_conf
  portal_session_conf:
    valueFrom:
      secretKeyRef:
        name: kong-session-conf
        key: portal_session_conf

replicaCount: 1

# Specify Kong admin API service and listener configuration
admin:
  enabled: true
  type: LoadBalancer
  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001
    parameters: []
  tls:
    enabled: true
    servicePort: 8444
    containerPort: 8444
    parameters:
      - http2
      - ssl
  ingress:
    enabled: false
    
# plugins:
#   configMaps:
#   - pluginName: rate-limiting-advanced-by-size
#     name: rate-limiting-advanced-by-size

status:
  http:
    enabled: true
    containerPort: 8100

cluster:
  enabled: true
  annotations: {}
  tls:
    enabled: true
    servicePort: 8005
    containerPort: 8005
    parameters: []
  type: ClusterIP
  externalIPs: []

  
secretVolumes:
  - kong-cp-cert
  # - kong-ca-cert
  # - kong-ssl-cert

waitImage:
  pullPolicy: IfNotPresent
  lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "/bin/sleep 15 && kong quit"]

serviceMonitor:
  enabled: true

enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  vitals:
    enabled: true
  portal:
    enabled: true
  rbac:
    enabled: false
    admin_gui_auth: openid-connect
    # admin_gui_auth: basic-auth
    admin_gui_auth_conf_secret: kong-auth-conf
    session_conf_secret: kong-session-conf

manager:
  enabled: true
  type: LoadBalancer

  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002
    parameters: []

  tls:
    enabled: true
    servicePort: 8445
    containerPort: 8445
    parameters:
    - http2
    - ssl

  ingress:
    enabled: false
    # hostname: manager.local.lan
    # annotations: 
    #   kubernetes.io/ingress.class: kong
    #   konghq.com/protocols: https
    # tls:
    #   kong-ssl-cert


  externalIPs: []

portal:
  enabled: true
  type: LoadBalancer

  http:
    enabled: true
    servicePort: 8003
    containerPort: 8003
    parameters: []

  tls:
    enabled: true
    servicePort: 8446
    containerPort: 8446
    parameters:
    - http2
    - ssl

  ingress:
    enabled: false

  externalIPs: []

portalapi:
  enabled: true
  type: LoadBalancer

  http:
    enabled: true
    servicePort: 8004
    containerPort: 8004
    parameters: []

  tls:
    enabled: true
    servicePort: 8447
    containerPort: 8447
    parameters:
    - http2
    - ssl

  ingress:
    enabled: false

  externalIPs: []

clustertelemetry:
  enabled: true
  tls:
    enabled: true
    servicePort: 8006
    containerPort: 8006
    parameters: []
  type: ClusterIP
  externalIPs: []

proxy:
  enabled: false

ingressController:
  enabled: false

# only if pod not enough to initiate
readinessProbe:
  initialDelaySeconds: 30

livenessProbe:
  initialDelaySeconds: 30
  
# To Run postgres as subchart
# postgresql:
#   enabled: true
#   postgresqlUsername: kong
#   postgresqlDatabase: kong
#   postgresqlPassword: kong
#   service:
#     port: 5432